name: Erlang CI/CD Pipeline

on:
  push:
    branches: [ main, staging ]
  pull_request:
    branches: [ main ]

env:
  OTP_VERSION: '26.0'
  REBAR3_VERSION: '3.22.1'
  RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}

jobs:
  # ============================================
  # CODE QUALITY & TESTING
  # ============================================
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Erlang/OTP
        uses: erlef/setup-beam@v1
        with:
          otp-version: ${{ env.OTP_VERSION }}
          rebar3-version: ${{ env.REBAR3_VERSION }}
      
      - name: Cache Rebar3 dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/rebar3
            _build
          key: ${{ runner.os }}-rebar3-${{ hashFiles('**/rebar.lock') }}
          restore-keys: |
            ${{ runner.os }}-rebar3-
      
      - name: Install dependencies
        run: |
          rebar3 deps
          rebar3 compile
      
      - name: Run EUnit tests
        run: rebar3 eunit
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: test_db
          DB_USER: postgres
          DB_PASS: postgres
      
      - name: Run Common Test
        run: rebar3 ct
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: test_db
          DB_USER: postgres
          DB_PASS: postgres
      
      - name: Run Dialyzer
        run: |
          rebar3 dialyzer
        continue-on-error: false  # Fail on type errors
      
      - name: Run Hank (dead code detection)
        run: |
          rebar3 hank
        continue-on-error: true  # Warning only
      
      - name: Run Cover (code coverage)
        run: |
          rebar3 cover
          rebar3 covertool generate
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          files: ./_build/test/covertool/myapp.covertool.xml
          fail_ci_if_error: false
      
      - name: Run XRef (cross reference analysis)
        run: rebar3 xref

  # ============================================
  # BUILD DOCKER IMAGE
  # ============================================
  build:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "tag=latest" >> $GITHUB_OUTPUT
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "tag=staging" >> $GITHUB_OUTPUT
          fi
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/myapp:${{ steps.env.outputs.tag }}
            ${{ secrets.DOCKER_USERNAME }}/myapp:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            OTP_VERSION=${{ env.OTP_VERSION }}
            BUILD_ENV=${{ steps.env.outputs.environment }}

  # ============================================
  # DEPLOY TO STAGING
  # ============================================
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/staging'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy to Render Staging
        run: |
          echo "üöÄ Deploying to staging..."
          
          # Trigger deployment via Render API
          curl -X POST "https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID_STAGING }}/deploys" \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{"clearCache": "clear"}'
      
      - name: Wait for deployment
        run: |
          echo "‚è≥ Waiting for deployment to stabilize..."
          sleep 60
      
      - name: Health check
        run: |
          echo "üè• Running health check..."
          max_attempts=10
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            if curl -f https://myapp-api-staging.onrender.com/health; then
              echo "‚úÖ Health check passed!"
              exit 0
            fi
            
            echo "Attempt $attempt failed, waiting..."
            sleep 10
            attempt=$((attempt + 1))
          done
          
          echo "‚ùå Health check failed after $max_attempts attempts"
          exit 1

  # ============================================
  # RUN E2E TESTS ON STAGING
  # ============================================
  e2e-staging:
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/staging'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install Playwright
        run: |
          cd e2e
          npm ci
          npx playwright install --with-deps
      
      - name: Run E2E tests
        env:
          BASE_URL: https://myapp-staging.onrender.com
          API_URL: https://myapp-api-staging.onrender.com
          AUTH0_TEST_USER: ${{ secrets.AUTH0_TEST_USER }}
          AUTH0_TEST_PASSWORD: ${{ secrets.AUTH0_TEST_PASSWORD }}
        run: |
          cd e2e
          npm run test:e2e
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-report
          path: e2e/playwright-report/
          retention-days: 7

  # ============================================
  # DEPLOY TO PRODUCTION
  # ============================================
  deploy-production:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Create database backup
        run: |
          echo "üíæ Creating production database backup..."
          # This would use Render API to create a backup
          # Or connect directly to backup the database
      
      - name: Deploy to Render Production
        run: |
          echo "üöÄ Deploying to production..."
          
          curl -X POST "https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID_PROD }}/deploys" \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{"clearCache": "clear"}'
      
      - name: Wait for deployment
        run: |
          echo "‚è≥ Waiting for deployment to stabilize..."
          sleep 120
      
      - name: Health check
        run: |
          echo "üè• Running health check..."
          max_attempts=10
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            if curl -f https://myapp-api.onrender.com/health; then
              echo "‚úÖ Health check passed!"
              exit 0
            fi
            
            echo "Attempt $attempt failed, waiting..."
            sleep 10
            attempt=$((attempt + 1))
          done
          
          echo "‚ùå Health check failed after $max_attempts attempts"
          exit 1
      
      - name: Run smoke tests
        run: |
          echo "üî• Running smoke tests..."
          # Critical path tests only
          curl -f https://myapp-api.onrender.com/api/status
          curl -f https://myapp.onrender.com
      
      - name: Notify deployment
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Production deployment ${{ job.status }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # ============================================
  # ROLLBACK ON FAILURE
  # ============================================
  rollback:
    runs-on: ubuntu-latest
    needs: deploy-production
    if: failure() && github.ref == 'refs/heads/main'
    
    steps:
      - name: Rollback production
        run: |
          echo "üîÑ Rolling back production deployment..."
          # This would use Render API to rollback to previous deployment
          curl -X POST "https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID_PROD }}/rollback" \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}"
      
      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "‚ö†Ô∏è Production deployment rolled back due to failure"
            }
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}